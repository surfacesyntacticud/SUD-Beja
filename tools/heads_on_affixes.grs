package p {
  rule DerAff {
    pattern {
      N [];
      AFF [TokenType=DerAff, upos = lex.upos];
      e: N -[1=aff]-> AFF
    }
    without { N -[aff:aux]-> X }
    without { N -[1=aff]-> IA; IA[TokenType=InflAff] }
    commands {
      del_edge e;
      shift N ==> AFF;
      add_edge AFF -[comp:aff]-> N;
      AFF.DerPos = lex.DerPos
      %del_feat AFF.TokenType
    }
  }
#BEGIN lex
upos	DerPos
%=========
AUX	VERB
SCONJ	NOUN
#END

  rule InflAff_SCONJ {
    pattern {
      N [];
      AFF [TokenType=InflAff, upos=SCONJ];
      e: N -[1=aff]-> AFF
    }
    commands {  
      del_edge e;
      shift N =[1<>mod|subj|comp]=> AFF;
      add_edge AFF -[comp:aff]-> N;
      %del_feat AFF.TokenType
    }
  }

  rule InflAff_AUX {
    pattern {
      N [];
      AFF [TokenType=InflAff, upos=AUX];
      e: N -[1=aff]-> AFF
    }
    commands {  
      del_edge e;
      shift N =[1<>mod|comp]=> AFF;
      add_edge AFF -[comp:aff]-> N;
      %del_feat AFF.TokenType
    }
  }
  
  rule part_case {
    pattern {
      N [];
      AFF [TokenType=InflAff, upos=PART, Case];
      e: N -[1=aff]-> AFF
    }
    commands {  
      del_edge e;
      shift N =[1<>mod|subj|comp]=> AFF;
      add_edge AFF -[comp:aff]-> N;
      %del_feat AFF.TokenType;
      AFF.upos = ADP;
    }
  }

  rule part_not_case {
    pattern {
      N [];
      AFF [TokenType=InflAff, upos=PART, !Case];
      e: N -[1=aff]-> AFF
    }
    commands {  
      del_edge e;
      add_edge N -[comp:aff]-> AFF;
      %del_feat AFF.TokenType;
      AFF.upos = DET;
    }
  }

  }


rule x {
  pattern {
    N [];
    AFF [TokenType=InflAff, upos=X];
    e: N -[1=aff, 2=*]-> AFF
  }
  commands {  
    AFF.upos = PART;
    del_feat e.2;
  }
  
  
}

strat main { Seq(Iter (p), Iter (x)) }
